{xeogl.OBJModel=class xeoglOBJModel extends xeogl.Model{init(cfg){super.init(cfg);this._src=null;this.src=cfg.src}
set src(value){if(!value){return}
if(!xeogl._isString(value)){this.error("Value for 'src' should be a string");return}
if(value===this._src){this.fire("loaded",!0,!0);return}
this.destroyAll();this._src=value;xeogl.OBJModel.load(this,this._src);this.fire("src",this._src)}
get src(){return this._src}
static load(model,src,ok){var spinner=model.scene.canvas.spinner;spinner.processes++;loadOBJ(model,src,function(state){loadMTLs(model,state,function(){createMeshes(model,state);spinner.processes--;xeogl.scheduleTask(function(){model.fire("loaded",!0)});if(ok){ok()}})})}
static parse(model,objText,mtlText,basePath){if(!objText){this.warn("load() param expected: objText");return}
var state=parseOBJ(model,objText,null);if(mtlText){parseMTL(model,mtlText,basePath)}
createMeshes(model,state);model.src=null;model.fire("loaded",!0,!0)}};var loadOBJ=function(model,url,ok){loadFile(url,function(text){var state=parseOBJ(model,text,url);ok(state)},function(error){model.error(error)})};var parseOBJ=(function(){const regexp={vertex_pattern:/^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,normal_pattern:/^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,uv_pattern:/^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,face_vertex:/^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,face_vertex_uv:/^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,face_vertex_uv_normal:/^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,face_vertex_normal:/^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,object_pattern:/^[og]\s*(.+)?/,smoothing_pattern:/^s\s+(\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /};return function(model,text,url){url=url||""
var state={src:url,basePath:getBasePath(url),objects:[],object:{},positions:[],normals:[],uv:[],materialLibraries:{}};startObject(state,"",!1);if(text.indexOf('\r\n')!==-1){text=text.replace('\r\n','\n')}
var lines=text.split('\n');var line='',lineFirstChar='',lineSecondChar='';var lineLength=0;var result=[];var trimLeft=(typeof ''.trimLeft==='function');for(var i=0,l=lines.length;i<l;i++){line=lines[i];line=trimLeft?line.trimLeft():line.trim();lineLength=line.length;if(lineLength===0){continue}
lineFirstChar=line.charAt(0);if(lineFirstChar==='#'){continue}
if(lineFirstChar==='v'){lineSecondChar=line.charAt(1);if(lineSecondChar===' '&&(result=regexp.vertex_pattern.exec(line))!==null){state.positions.push(parseFloat(result[1]),parseFloat(result[2]),parseFloat(result[3]))}else if(lineSecondChar==='n'&&(result=regexp.normal_pattern.exec(line))!==null){state.normals.push(parseFloat(result[1]),parseFloat(result[2]),parseFloat(result[3]))}else if(lineSecondChar==='t'&&(result=regexp.uv_pattern.exec(line))!==null){state.uv.push(parseFloat(result[1]),parseFloat(result[2]))}else{model.error('Unexpected vertex/normal/uv line: \''+line+'\'');return}}else if(lineFirstChar==='f'){if((result=regexp.face_vertex_uv_normal.exec(line))!==null){addFace(state,result[1],result[4],result[7],result[10],result[2],result[5],result[8],result[11],result[3],result[6],result[9],result[12])}else if((result=regexp.face_vertex_uv.exec(line))!==null){addFace(state,result[1],result[3],result[5],result[7],result[2],result[4],result[6],result[8])}else if((result=regexp.face_vertex_normal.exec(line))!==null){addFace(state,result[1],result[3],result[5],result[7],undefined,undefined,undefined,undefined,result[2],result[4],result[6],result[8])}else if((result=regexp.face_vertex.exec(line))!==null){addFace(state,result[1],result[2],result[3],result[4])}else{model.error('Unexpected face line: \''+line+'\'');return}}else if(lineFirstChar==='l'){var lineParts=line.substring(1).trim().split(' ');var lineVertices=[],lineUVs=[];if(line.indexOf('/')===-1){lineVertices=lineParts}else{for(var li=0,llen=lineParts.length;li<llen;li++){var parts=lineParts[li].split('/');if(parts[0]!==''){lineVertices.push(parts[0])}
if(parts[1]!==''){lineUVs.push(parts[1])}}}
addLineGeometry(state,lineVertices,lineUVs)}else if((result=regexp.object_pattern.exec(line))!==null){var id=result[0].substr(1).trim();startObject(state,id,!0)}else if(regexp.material_use_pattern.test(line)){var id=line.substring(7).trim();state.object.material.id=id}else if(regexp.material_library_pattern.test(line)){state.materialLibraries[line.substring(7).trim()]=!0}else if((result=regexp.smoothing_pattern.exec(line))!==null){var value=result[1].trim().toLowerCase();state.object.material.smooth=(value==='1'||value==='on')}else{if(line==='\0'){continue}
model.error('Unexpected line: \''+line+'\'');return}}
return state};function getBasePath(src){var n=src.lastIndexOf('/');return(n===-1)?src:src.substring(0,n+1)}
function startObject(state,id,fromDeclaration){if(state.object&&state.object.fromDeclaration===!1){state.object.id=id;state.object.fromDeclaration=(fromDeclaration!==!1);return}
state.object={id:id||'',geometry:{positions:[],normals:[],uv:[]},material:{id:'',smooth:!0},fromDeclaration:(fromDeclaration!==!1)};state.objects.push(state.object)}
function parseVertexIndex(value,len){var index=parseInt(value,10);return(index>=0?index-1:index+len/3)*3}
function parseNormalIndex(value,len){var index=parseInt(value,10);return(index>=0?index-1:index+len/3)*3}
function parseUVIndex(value,len){var index=parseInt(value,10);return(index>=0?index-1:index+len/2)*2}
function addVertex(state,a,b,c){var src=state.positions;var dst=state.object.geometry.positions;dst.push(src[a+0]);dst.push(src[a+1]);dst.push(src[a+2]);dst.push(src[b+0]);dst.push(src[b+1]);dst.push(src[b+2]);dst.push(src[c+0]);dst.push(src[c+1]);dst.push(src[c+2])}
function addVertexLine(state,a){var src=state.positions;var dst=state.object.geometry.positions;dst.push(src[a+0]);dst.push(src[a+1]);dst.push(src[a+2])}
function addNormal(state,a,b,c){var src=state.normals;var dst=state.object.geometry.normals;dst.push(src[a+0]);dst.push(src[a+1]);dst.push(src[a+2]);dst.push(src[b+0]);dst.push(src[b+1]);dst.push(src[b+2]);dst.push(src[c+0]);dst.push(src[c+1]);dst.push(src[c+2])}
function addUV(state,a,b,c){var src=state.uv;var dst=state.object.geometry.uv;dst.push(src[a+0]);dst.push(src[a+1]);dst.push(src[b+0]);dst.push(src[b+1]);dst.push(src[c+0]);dst.push(src[c+1])}
function addUVLine(state,a){var src=state.uv;var dst=state.object.geometry.uv;dst.push(src[a+0]);dst.push(src[a+1])}
function addFace(state,a,b,c,d,ua,ub,uc,ud,na,nb,nc,nd){var vLen=state.positions.length;var ia=parseVertexIndex(a,vLen);var ib=parseVertexIndex(b,vLen);var ic=parseVertexIndex(c,vLen);var id;if(d===undefined){addVertex(state,ia,ib,ic)}else{id=parseVertexIndex(d,vLen);addVertex(state,ia,ib,id);addVertex(state,ib,ic,id)}
if(ua!==undefined){var uvLen=state.uv.length;ia=parseUVIndex(ua,uvLen);ib=parseUVIndex(ub,uvLen);ic=parseUVIndex(uc,uvLen);if(d===undefined){addUV(state,ia,ib,ic)}else{id=parseUVIndex(ud,uvLen);addUV(state,ia,ib,id);addUV(state,ib,ic,id)}}
if(na!==undefined){var nLen=state.normals.length;ia=parseNormalIndex(na,nLen);ib=na===nb?ia:parseNormalIndex(nb,nLen);ic=na===nc?ia:parseNormalIndex(nc,nLen);if(d===undefined){addNormal(state,ia,ib,ic)}else{id=parseNormalIndex(nd,nLen);addNormal(state,ia,ib,id);addNormal(state,ib,ic,id)}}}
function addLineGeometry(state,positions,uv){state.object.geometry.type='Line';var vLen=state.positions.length;var uvLen=state.uv.length;for(var vi=0,l=positions.length;vi<l;vi++){addVertexLine(state,parseVertexIndex(positions[vi],vLen))}
for(var uvi=0,uvl=uv.length;uvi<uvl;uvi++){addUVLine(state,parseUVIndex(uv[uvi],uvLen))}}})();function loadMTLs(model,state,ok){var basePath=state.basePath;var srcList=Object.keys(state.materialLibraries);var numToLoad=srcList.length;for(var i=0,len=numToLoad;i<len;i++){loadMTL(model,basePath,basePath+srcList[i],function(){if(--numToLoad===0){ok()}})}}
var loadMTL=function(model,basePath,src,ok){loadFile(src,function(text){parseMTL(model,text,basePath);ok()},function(error){model.error(error);ok()})};var parseMTL=(function(){var delimiter_pattern=/\s+/;return function(model,mtlText,basePath){var lines=mtlText.split('\n');var materialCfg={id:"Default"};var needCreate=!1;var line;var pos;var key;var value;var alpha;basePath=basePath||"";for(var i=0;i<lines.length;i++){line=lines[i].trim();if(line.length===0||line.charAt(0)==='#'){continue}
pos=line.indexOf(' ');key=(pos>=0)?line.substring(0,pos):line;key=key.toLowerCase();value=(pos>=0)?line.substring(pos+1):'';value=value.trim();switch(key.toLowerCase()){case "newmtl":createMaterial(model,materialCfg);materialCfg={id:value};needCreate=!0;break;case 'ka':materialCfg.ambient=parseRGB(value);break;case 'kd':materialCfg.diffuse=parseRGB(value);break;case 'ks':materialCfg.specular=parseRGB(value);break;case 'map_kd':if(!materialCfg.diffuseMap){materialCfg.diffuseMap=createTexture(model,basePath,value,"sRGB")}
break;case 'map_ks':if(!materialCfg.specularMap){materialCfg.specularMap=createTexture(model,basePath,value,"linear")}
break;case 'map_bump':case 'bump':if(!materialCfg.normalMap){materialCfg.normalMap=createTexture(model,basePath,value)}
break;case 'ns':materialCfg.shininess=parseFloat(value);break;case 'd':alpha=parseFloat(value);if(alpha<1){materialCfg.alpha=alpha;materialCfg.alphaMode="blend"}
break;case 'tr':alpha=parseFloat(value);if(alpha>0){materialCfg.alpha=1-alpha;materialCfg.alphaMode="blend"}
break;default:}}
if(needCreate){createMaterial(model,materialCfg)}};function createTexture(model,basePath,value,encoding){var textureCfg={};var items=value.split(/\s+/);var pos=items.indexOf('-bm');if(pos>=0){items.splice(pos,2)}
pos=items.indexOf('-s');if(pos>=0){textureCfg.scale=[parseFloat(items[pos+1]),parseFloat(items[pos+2])];items.splice(pos,4)}
pos=items.indexOf('-o');if(pos>=0){textureCfg.translate=[parseFloat(items[pos+1]),parseFloat(items[pos+2])];items.splice(pos,4)}
textureCfg.src=basePath+items.join(' ').trim();textureCfg.flipY=!0;textureCfg.encoding=encoding||"linear";var texture=new xeogl.Texture(model,textureCfg);model._addComponent(texture);return texture.id}
function createMaterial(model,materialCfg){model._addComponent(new xeogl.PhongMaterial(model,materialCfg))}
function parseRGB(value){var ss=value.split(delimiter_pattern,3);return[parseFloat(ss[0]),parseFloat(ss[1]),parseFloat(ss[2])]}})();var createMeshes=(function(){return function(model,state){for(var j=0,k=state.objects.length;j<k;j++){var object=state.objects[j];var geometry=object.geometry;var isLine=(geometry.type==='Line');if(geometry.positions.length===0){continue}
var geometryCfg={primitive:"triangles"};geometryCfg.positions=geometry.positions;if(geometry.normals.length>0){geometryCfg.normals=geometry.normals}else{geometryCfg.autoVertexNormals=!0}
if(geometry.uv.length>0){geometryCfg.uv=geometry.uv}
var indices=new Array(geometryCfg.positions.length/3);for(var idx=0;idx<indices.length;idx++){indices[idx]=idx}
geometryCfg.indices=indices;var xeoGeometry=new xeogl.Geometry(model,geometryCfg);model._addComponent(xeoGeometry);var materialId=object.material.id;var material;if(materialId&&materialId!==""){material=model.scene.components[materialId];if(!material){model.error("Material not found: "+materialId)}}else{material=new xeogl.PhongMaterial(model,{diffuse:[0.6,0.6,0.6],backfaces:!0});model._addComponent(material)}
var mesh=new xeogl.Mesh(model,{id:model.id+"#"+object.id,geometry:xeoGeometry,material:material,pickable:!0});model.addChild(mesh);model._addComponent(mesh)}}})();function loadFile(url,ok,err){var request=new XMLHttpRequest();request.open('GET',url,!0);request.addEventListener('load',function(event){var response=event.target.response;if(this.status===200){if(ok){ok(response)}}else if(this.status===0){console.warn('loadFile: HTTP Status 0 received.');if(ok){ok(response)}}else{if(err){err(event)}}},!1);request.addEventListener('error',function(event){if(err){err(event)}},!1);request.send(null)}}